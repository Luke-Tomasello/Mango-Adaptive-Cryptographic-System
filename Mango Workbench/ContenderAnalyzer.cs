/*
 * ContenderAnalyzer Module
 * =============================================
 * Project: Mango
 * Purpose: Parses and summarizes log files generated by Mango’s cryptographic
 *          evaluations, with a focus on analyzing metric pass/fail trends across
 *          contender sequences.
 *
 *          Key Responsibilities:
 *            • Load and scan multiple ContenderLog files
 *            • Extract and summarize pass/fail data per metric
 *            • Identify top passers and failers per metric
 *            • Output analysis in screen-readable and RTF formats
 *
 *          This tool supports batch post-analysis and is ideal for:
 *            → Understanding metric bottlenecks
 *            → Identifying consistently weak or strong sequences
 *            → Generating readable summaries for reporting
 *
 * Author: [Luke Tomasello, luke@tomasello.com]
 * Created: November 2024
 * License: [MIT]
 * =============================================
 */

using Mango.Utilities;

namespace Mango.Analysis;

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public static class ContenderAnalyzer
{
    public static void AnalyzeAndReport(string directoryPath, string outputMode = "both")
    {
        // Find all matching log files
        var logFiles = Directory.GetFiles(directoryPath, "ContenderLog - L*, PC*.txt");

        if (logFiles.Length == 0)
        {
            Console.WriteLine("No log files found matching the pattern.");
            return;
        }

        // Perform analysis
        var FileMetricsSummarys = AnalyzeLogs(logFiles);

        // Generate reports
        if (outputMode == "screen" || outputMode == "both") OutputToScreen(FileMetricsSummarys);

        if (outputMode == "file" || outputMode == "both")
        {
            var rtfFilePath = Path.Combine(directoryPath, "CombinedAnalysisReport.rtf");
            OutputToRTF(FileMetricsSummarys, rtfFilePath);
            Console.WriteLine($"RTF report saved to: {rtfFilePath}");
        }
    }

    private static List<FileMetricsSummary> AnalyzeLogs(string[] logFiles)
    {
        var results = new List<FileMetricsSummary>();

        foreach (var file in logFiles)
        {
            var fileContent = File.ReadAllLines(file);
            var analysis = ParseAndAnalyze(fileContent, Path.GetFileName(file));
            results.Add(analysis);
        }

        return results;
    }

    private static FileMetricsSummary ParseAndAnalyze(string[] fileContent, string fileName)
    {
        var metricsSummary =
            new Dictionary<string, (int PassCount, int TotalCount, List<string> Passers, List<string> Failers)>();
        var currentSequence = "";
        foreach (var line in fileContent)
            if (line.StartsWith("Sequence:"))
            {
                currentSequence = line.Split(':')[1].Trim();
            }
            else if (line.StartsWith("- "))
            {
                var metricName = line.Split(':')[0].Substring(2).Trim();
                var passed = line.Contains("PASS");

                if (!metricsSummary.ContainsKey(metricName))
                    metricsSummary[metricName] = (0, 0, new List<string>(), new List<string>());

                var entry = metricsSummary[metricName];
                entry.TotalCount++;
                if (passed)
                {
                    entry.PassCount++;
                    entry.Passers.Add(currentSequence);
                }
                else
                {
                    entry.Failers.Add(currentSequence);
                }

                metricsSummary[metricName] = entry;
            }

        return new FileMetricsSummary { FileName = fileName, MetricsSummary = metricsSummary };
    }

    private static void OutputToScreen(List<FileMetricsSummary> results)
    {
        foreach (var result in results)
        {
            ColorConsole.WriteLine($"Analysis Report for {result.FileName}", ConsoleColor.Cyan);
            foreach (var metric in result.MetricsSummary)
            {
                var passRate =
                    $"{metric.Value.PassCount}/{metric.Value.TotalCount} ({(double)metric.Value.PassCount / metric.Value.TotalCount:P1})";
                ColorConsole.WriteLine($"Metric: {metric.Key}", ConsoleColor.Green);
                ColorConsole.WriteLine($"  Pass Rate: {passRate}", ConsoleColor.Yellow);

                ColorConsole.WriteLine($"  Top Passers:", ConsoleColor.White);
                foreach (var passer in metric.Value.Passers.Take(5))
                    ColorConsole.WriteLine($"    {passer}", ConsoleColor.White);

                ColorConsole.WriteLine($"  Top Failers:", ConsoleColor.Red);
                foreach (var failer in metric.Value.Failers.Take(5))
                    ColorConsole.WriteLine($"    {failer}", ConsoleColor.Red);
            }
        }
    }

    private static void OutputToRTF(List<FileMetricsSummary> results, string rtfFilePath)
    {
        var rtfBuilder = new StringBuilder();
        rtfBuilder.AppendLine(@"{\rtf1\ansi\deff0 {\fonttbl {\f0 Courier New;}}\fs20");

        foreach (var result in results)
        {
            rtfBuilder.AppendLine($@"\b Analysis Report for {result.FileName} \b0\par");
            foreach (var metric in result.MetricsSummary)
            {
                var passRate =
                    $"{metric.Value.PassCount}/{metric.Value.TotalCount} ({(double)metric.Value.PassCount / metric.Value.TotalCount:P1})";
                rtfBuilder.AppendLine($@"\cf1 Metric: {metric.Key}\cf0\par");
                rtfBuilder.AppendLine($@"  Pass Rate: {passRate}\par");

                rtfBuilder.AppendLine($@"  Top Passers:\par");
                foreach (var passer in metric.Value.Passers.Take(5)) rtfBuilder.AppendLine($@"    {passer}\par");

                rtfBuilder.AppendLine($@"  Top Failers:\par");
                foreach (var failer in metric.Value.Failers.Take(5)) rtfBuilder.AppendLine($@"    {failer}\par");
            }
        }

        rtfBuilder.AppendLine("}"); // Close RTF document
        File.WriteAllText(rtfFilePath, rtfBuilder.ToString());
    }
}

public class FileMetricsSummary
{
    public string FileName { get; set; } = null!;

    public required Dictionary<string, (int PassCount, int TotalCount, List<string> Passers, List<string> Failers)>
        MetricsSummary
    { get; set; }
}